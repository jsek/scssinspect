// Generated by CoffeeScript 1.8.0
var DefaultReporter, Inspector, expect, fixtures, helpers;

expect = require('expect.js');

fixtures = require('./fixtures');

helpers = require('./helpers');

DefaultReporter = require('../lib/reporters/default');

Inspector = require('../lib/inspector');

describe('Parser', function() {
  beforeEach(function() {
    return helpers.captureOutput();
  });
  it('should parse stylesheet with comments correctly', function() {
    var file;
    file = fixtures.comments1;
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'comments1', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be("\nMatch - 2 instances\n" + file + ":1,5\n" + file + ":12,16\n");
    });
  });
  it('should parse stylesheet with comments inside ruleset correctly', function() {
    var file;
    file = fixtures.comments2;
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'comments2', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be("\nMatch - 2 instances\n" + file + ":1,5\n" + file + ":7,15\n");
    });
  });
  it('should parse stylesheet with import statements without exception', function() {
    var file;
    file = fixtures['import-strings'];
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'import-strings', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be('');
    });
  });
  it('should parse interpolation in calc without exception', function() {
    var file;
    file = fixtures['interpolation-calc'];
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'interpolation-calc', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be('');
    });
  });
  it('should parse functions inside interpolation without exception', function() {
    var file;
    file = fixtures['interpolation-functions'];
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'interpolation-functions', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be('');
    });
  });
  xit('should parse media-queries without exception', function() {
    var file;
    file = fixtures['media-queries'];
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'media-queries', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be('');
    });
  });
  xit('should parse negative values without exception', function() {
    var file;
    file = fixtures['negative-values'];
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'negative-values', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be('');
    });
  });
  it('should parse nested functions without exception', function() {
    var file;
    file = fixtures['nested-functions'];
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'nested-functions', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be('');
    });
  });
  xit('should parse expressions inside url() without exception', function() {
    var file;
    file = fixtures['expression-in-url'];
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'expression-in-url', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be('');
    });
  });
  return xit('should parse variables assignment without exception', function() {
    var file;
    file = fixtures['media-queries'];
    return helpers.safeTestOutput(Inspector, DefaultReporter, 'variables', {
      diff: false,
      ignoreSummary: true
    }, function(o) {
      return expect(o).to.be('');
    });
  });
});
