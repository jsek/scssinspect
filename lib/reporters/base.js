// Generated by CoffeeScript 1.8.0
var BaseReporter, chalk, path, util;

util = require('util');

path = require('path');

chalk = require('chalk');


/**
 * A base reporter from which all others inherit. Registers a listener on the
 * passed inspector instance for tracking the number of matches found.
 */

BaseReporter = (function() {

  /**
   * @constructor
   *
   * @param {Inspector} inspector The instance on which to register its listeners
   * @param {object}    opts      Options to set for the reporter
   */
  function BaseReporter(_inspector, opts) {
    this._inspector = _inspector;
    if (opts == null) {
      opts = {};
    }
    this._found = 0;
    this._suppress = opts.suppress === 0 ? 0 : opts.suppress || 1000;
    this._registerListener();
  }


  /**
   * Registers a listener to the "match" event exposed by the Inspector instance.
   * Increments _found for each match emitted, and invokes the object's
   * _getOutput method, writing it to stdout.
   *
   * @private
   */

  BaseReporter.prototype._registerListener = function() {
    return this._inspector.on('match', (function(_this) {
      return function(match) {
        _this._found++;
        return process.stdout.write(_this._getOutput(match));
      };
    })(this));
  };


  /**
   * Registers a listener that prints a final summary outlining the number of
   * matches detected, as well as the number of files analyzed.
   */

  BaseReporter.prototype._registerSummary = function() {
    return this._inspector.on('end', (function(_this) {
      return function() {
        var numFiles;
        numFiles = _this._inspector.numFiles;
        if (!_this._found) {
          return process.stdout.write(chalk.black.bgGreen("\n No matches found across " + numFiles + " files\n"));
        } else {
          return process.stdout.write(chalk.bgRed("\n " + _this._found + " matches found across " + numFiles + " files\n"));
        }
      };
    })(this));
  };


  /**
   * Accepts a diff object and returns a corresponding formatted diff string.
   * The object contains three keys: value, a string with possible newlines,
   * added, a boolean indicating if it were an addition, and removed, for if it
   * were removed from the src. The formatted diff is padded and uses "+" and "-"
   * for indicating the addition and removal of lines.
   *
   * @param   {Object} diff The diff object to format
   * @returns {string} A formatted diff
   */

  BaseReporter.prototype._getFormattedDiff = function(diff) {
    var chunk, diffLength, line, lines, output, _i, _j, _len, _len1;
    output = '';
    diffLength = 0;
    for (_i = 0, _len = diff.length; _i < _len; _i++) {
      chunk = diff[_i];
      lines = chunk.value.split('\n');
      if (chunk.value.slice(-1) === '\n') {
        lines = lines.slice(0, -1);
      }
      diffLength += lines.length;
      if (this._suppress && diffLength > this._suppress) {
        return "Diff suppressed as it exceeded " + this._suppress + " lines\n";
      }
      for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
        line = lines[_j];
        if (chunk.added) {
          output += chalk.green("+   " + line + "\n");
        } else if (chunk.removed) {
          output += chalk.red("-   " + line + "\n");
        } else {
          output += "    " + line + "\n";
        }
      }
    }
    return output;
  };


  /**
   * Returns a string containing the path to the file in which the node is
   * located, as well as the lines on which the node exists.
   *
   * @param   {Node}   node The node from which to get a formatted source
   * @returns {string} The formatted string
   */

  BaseReporter.prototype._getFormattedLocation = function(node) {
    var filePath;
    filePath = node.loc.source;
    if (filePath.charAt(0) === '/') {
      filePath = path.relative(process.cwd(), filePath);
    }
    return filePath + (":" + node.loc.start.line + "," + node.loc.end.line);
  };

  return BaseReporter;

})();

module.exports = BaseReporter;
